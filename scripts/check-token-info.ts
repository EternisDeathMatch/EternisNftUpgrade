// scripts/check-token-info-enhanced.ts
import { ethers } from "hardhat";

async function main() {
  // ── A) Signers ────────────────────────────────────────────────
  const [deployer, userA, userB] = await ethers.getSigners();
  console.log("Caller (deployer):", deployer.address);
  console.log("UserA:            ", userA.address);
  console.log("UserB:            ", userB.address);

  // ── B) Addresses ──────────────────────────────────────────────
  const LEVELER_ADDRESS = "0x2312B28684a1819614f6201349a6654ea1960b94"; // replace

  // ── C) Attach to your Leveler proxy ───────────────────────────
  const leveler = await ethers.getContractAt(
    "AlturaNFTLevelerV2",
    LEVELER_ADDRESS
  );

  // ── D) Read the token addresses via autogenerated getters ─────
  const erc1155Addr = await leveler.altura();
  const erc20Addr   = await leveler.paymentToken();
  console.log("\nERC-1155 (altura) address:  ", erc1155Addr);
  console.log("ERC-20   (paymentToken) address:", erc20Addr);

  // ── E) Attach to the token contracts ──────────────────────────
  const myToken   = await ethers.getContractAt("MyToken", erc1155Addr);
  const testToken = await ethers.getContractAt("TestToken", erc20Addr);

  // ── F) Query ERC-1155 balances for a couple of IDs ────────────
  const TOKEN_IDS = Array.from({ length: 101 }, (_, i) => i);
  console.log("\nERC-1155 balances:");
  for (const tid of TOKEN_IDS) {
    const balA = await myToken.balanceOf(userA.address, tid);
    const balB = await myToken.balanceOf(userB.address, tid);
    console.log(
      `  tokenId ${tid}: userA = ${balA.toString()}, userB = ${balB.toString()}`
    );
  }

  // ── G) Metadata URI for an example token ───────────────────────
  try {
    const uri1 = await myToken.uri(TOKEN_IDS[0]);
    console.log("\nURI(", TOKEN_IDS[0], "):", uri1);
  } catch {
    console.log("\nNo metadata URI function on ERC-1155 contract");
  }

  // ── H) Batch balances ─────────────────────────────────────────
  const owners = [userA.address, userB.address, userA.address];
  const ids    = [60,               1,              62];
  try {
    const batch = await myToken.balanceOfBatch(owners, ids);
    console.log("\nBatch balances [A@1, B@1, A@2]:", batch.map(b => b.toString()));
  } catch {
    console.log("\nbalanceOfBatch not supported");
  }

  // ── I) Operator approvals ──────────────────────────────────────
  try {
    const isApproved = await myToken.isApprovedForAll(userA.address, deployer.address);
    console.log(
      `\nUserA approved deployer?`,
      isApproved ? "yes" : "no"
    );
  } catch {
    console.log("\nisApprovedForAll not supported");
  }

  // ── J) ERC-165 interface detection ────────────────────────────
  try {
    const supports1155 = await myToken.supportsInterface("0xd9b67a26");  
    const supportsURI  = await myToken.supportsInterface("0x0e89341c");
    console.log("\nsupports ERC-1155?", supports1155);
    console.log("supports Metadata URI?", supportsURI);
  } catch {
    console.log("\nsupportsInterface not supported");
  }

  // ── K) Total supply & existence (if ERC1155Supply) ───────────
  try {
    const total1 = await (myToken as any).totalSupply(1);
    const exists1 = await (myToken as any).exists(1);
    console.log("\nTotalSupply(1):", total1.toString());
    console.log("Exists(1)?", exists1);
  } catch {
    console.log("\ntotalSupply/exists not supported");
  }

  // ── L) Query ERC-20 metadata & balances ───────────────────────
  const [name, symbol, decimals] = await Promise.all([
    testToken.name(),
    testToken.symbol(),
    testToken.decimals(),
  ]);
  console.log(`\nERC-20 name:     ${name}`);
  console.log(`ERC-20 symbol:   ${symbol}`);
  console.log(`ERC-20 decimals: ${decimals}`);

  const [balA20, balB20] = await Promise.all([
    testToken.balanceOf(userA.address),
    testToken.balanceOf(userB.address),
  ]);
  console.log(
    `\nERC-20 balances: userA = ${balA20.toString()}, userB = ${balB20.toString()}`
  );
}

main()
  .then(() => process.exit(0))
  .catch((err) => {
    console.error("Script failed:", err);
    process.exit(1);
  });
